<?php

namespace app\models;

use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "Teachers".
 *
 * @property int $T
 * @property string $NAME
 * @property string $NUMBER_PHONE
 * @property string $QUALIFICATION
 * @property int $fk_u
 *
 * @property User $fkU
 */
class Teacher extends \yii\db\ActiveRecord
{

    public $courses_array;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'Teachers';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['fk_u'], 'integer'],
            [['NAME'], 'string', 'max' => 64],
            [['NUMBER_PHONE'], 'string', 'max' => 20],
            [['EMAIL'], 'string', 'max' => 64],
            [['QUALIFICATION'], 'string', 'max' => 264],
            [['fk_u'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['fk_u' => 'id']],
            [['courses_array'],'safe']
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'T' => 'ID',
            'NAME' => 'Фамилия Имя Отчество',
            'NUMBER_PHONE' => 'Номер телефона',
            'EMAIL'=>'Электронная почта',
            'QUALIFICATION' => 'Квалификация',
            'courses_array' => 'Курсы',
            'coursesAsString' =>'Курсы',
            'courses' =>'Курсы'
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'fk_u']);
    }

    public function getTeacherCourse()
    {
        return $this->hasMany(TeacherCourse::className(), ['fk_T' => 'T']);
    }

    public function getCourses()
    {
        return $this->hasMany(Course::className(), ['C' => 'fk_C'])->via('teacherCourse');
    }

    public function getCoursesAsString()
    {
        $arr = ArrayHelper::map($this->courses,'C','NAME');
        return implode(', ',$arr);
    }

    public function beforeDelete()
    {
        if (parent::beforeDelete()){
            TeacherCourse::deleteAll(['fk_T'=>$this->T]);
            return true;
        }
        else {
            return false;
        }
    }

    public function afterFind()
    {
        $this->courses_array = $this->courses;
        //parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        $arr = ArrayHelper::map($this->courses,'C','C');
        $model = new TeacherCourse();

        //if (!empty($model->course)) {
            foreach ($this->courses_array as $one) {
                if (!in_array($one, $arr)) {

                    $model->fk_T = $this->T;
                    $model->fk_C = $one;
                    $model->save();
                }
                if (isset($arr[$one])) {
                    unset($arr[$one]);
                }
            }
        //}
        TeacherCourse::deleteAll(['fk_C'=>$arr]);
    }
}
