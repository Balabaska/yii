<?php

namespace app\models;

use Yii;
use yii\base\Model;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;

class Child extends ActiveRecord
{
	const STATUS_INACTIVE = 0;
	const STATUS_ACTIVE = 1;
    public $courses_array;

    public static function tableName(){
        return '{{Children}}';
    }

	public function rules(){
		return [
			[['NAME','NUMBER_PHONE','DATA_OF_BIRTH'],'required'],
			['NAME','string','length' => [2,64]],
            ['NUMBER_PHONE','string', 'length' => [11,20]],
            ['DATA_OF_BIRTH','date','format' => 'php:Y-m-d'],
            ['EMAIL','string','length' => [6,64]],
            ['EMAIL','email'],
            [['courses_array'],'safe']
		];
	}
    public function attributeLabels()
    {
        return array(
            'C' => 'ID',
            'NAME' => 'Фамилия Имя Отчество',
            'NUMBER_PHONE' => 'Номер телефона',
            'DATA_OF_BIRTH' => 'Дата рождения',
            'EMAIL' => 'Электронная почта',
            'courses_array' => 'Курсы',
            'coursesAsString' =>'Курсы',
            'courses' =>'Курсы'
        );
    }

    public function getCollective()
    {
        return $this->hasMany(Collective::className(), ['fk_CH' => 'C']);
    }

    public function getCourses()
    {
        return $this->hasMany(Course::className(), ['C' => 'fk_CR'])->via('collective');
    }

    public function getCoursesAsString()
    {
        $arr = ArrayHelper::map($this->courses,'C','NAME');
        return implode(', ',$arr);
    }

    public function beforeDelete()
    {
        if (parent::beforeDelete()){
            Collective::deleteAll(['fk_CH'=>$this->C]);
            return true;
        }
        else {
            return false;
        }
    }

    public function afterFind()
    {
        $this->courses_array = $this->courses;
        //parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        $arr = ArrayHelper::map($this->courses,'C','C');
        $model = new Collective();

        //if (!empty($model->courses)){

            foreach ($this->courses_array as $one){
                if (!in_array($one,$arr)) {

                    $model->fk_CH = $this->C;
                    $model->fk_CR = $one;
                    $model->save();
                }
                if (isset($arr[$one])){
                    unset($arr[$one]);
                }
            }
        //}
        Collective::deleteAll(['fk_CR'=>$arr]);
    }

}